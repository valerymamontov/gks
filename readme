import xml.dom.minidom

dom = xml.dom.minidom.parse("data.xml")
dom.normalize()

# --------------------- create dictionary regions ---------------------
codes = dom.getElementsByTagName("structure:CodeList")
# for i in codes:
#     print(i.getAttribute("id"))
# s_OKATO
# S_GRUP_2
# s_mest

dictRegion = {}
# создает пустой словарь
# чтобы получить элемент словаря, нужно обратиться к нему по ключу: dictRegion['643']

for i in codes:
    if i.getAttribute("id") == "s_OKATO":
        codesRegions = i.getElementsByTagName("structure:Code")
        # выведет то, что внутри <structure:Code value="643">

        for code in codesRegions:
            region = code.getElementsByTagName("structure:Description")[0]
            # <structure:Description xml:lang="ru">Российская Федерация</structure:Description>

            dictElem = {"%s" % code.getAttribute("value"): "%s" % region.childNodes[0].nodeValue}
            dictRegion.update(dictElem)

# ----------------------------------------------------

# названия переменные дублируют названия тегов внутри XML
# dataSet = dom.getElementsByTagName("DataSet")
genSeries = dom.getElementsByTagName("generic:Series")
print(type(genSeries)) # выведет тип переменной - это список
print(len(genSeries)) # посчитает длину списка - 1680

genSeries = genSeries[0]
genericTime = genSeries.getElementsByTagName("generic:Time")[0]
print(genericTime.firstChild.data)
# чтобы проверить вывод, сначала нужно из всего "списка"
# выбрать первый элемент (genSeries = genSeries[0]), тогда
# выведет 1990
# пояснения:
# т.к. тег "generic:Time" встречается внутри тега "generic:Series" всего один раз
# то нет смысла создавать список и циклом for проходить по нему
# а есть смысл сразу обратиться к нужному элементу, к первому - [0]

genericObsValue = genSeries.getElementsByTagName("generic:ObsValue")[0]
print(genericObsValue.getAttribute("value"))
# выведет 74,3
# пояснения:
# работает аналогично, с той лишь разницей, что во втором случае нужно получить не значение,
# содержащееся между тегами (<generic:Time>1993</generic:Time>),
# а значение атрибута (<generic:ObsValue value="71,8"/>)

codeOrg = genSeries.getElementsByTagName("generic:Value")[0].getAttribute("value")
# выведет 643
# пояснения:
# всё аналогично, сразу идёт обращение к первому элементу "списка" и в этой же строке
# переменная получает значение атрибута "value"

codeGender = genSeries.getElementsByTagName("generic:Value")[1].getAttribute("value")
codePopulation = genSeries.getElementsByTagName("generic:Value")[2].getAttribute("value")
# выведет значения двух остальных атрибутов
# 2
# w2:p_mest:11





# for i in genSeries:
#     obs = i.getElementsByTagName("generic:Obs")
#     for x in obs:
#         genericTime = x.getElementsByTagName("generic:Time")
#         for g in genericTime:
#             print(g.childNodes[0].nodeValue)
            # выводит год

for i in genSeries:
    obs = i.getElementsByTagName("generic:Obs")
    for x in obs:
        genericTime = x.getElementsByTagName("generic:Time")
        genericObsValue = x.getElementsByTagName("generic:ObsValue")
        for g in genericTime:
            for v in genericObsValue:
                print(g.childNodes[0].nodeValue, "--", v.getAttribute("value"))
                # выводит год и значение



import xml.dom.minidom

dom = xml.dom.minidom.parse("data.xml")
dom.normalize()

# --------------------- create dictionary regions ---------------------
codeList = dom.getElementsByTagName("structure:CodeList")
dictRegions = {}
for i in codeList.getElementsByTagName("structure:Code"):
    myDict = {"%s" % i.getAttribute("value"):"%s" % i.getElementsByTagName("structure:Description")[0].firstChild.data}
    dictRegions.update(myDict)
# ----------------------------------------------------
# чтобы получить элемент словаря, нужно обратиться к нему по ключу: dictRegion['643']

for key in myDict.keys():
    genSeries = dom.getElementsByTagName("generic:Series")
    genSeries[0]
    # отбирает только первую запись для теста

    codeOrg = genSeries.getElementsByTagName("generic:Value")[0].getAttribute("value")
    codeGender = genSeries.getElementsByTagName("generic:Value")[1].getAttribute("value")
    codePopulation = genSeries.getElementsByTagName("generic:Value")[2].getAttribute("value")

    file = open("001.txt", "a")
    file.write(block)

    year = genSeries.getElementsByTagName("generic:ObsValue")[0].getAttribute("value")
    genericTime = genSeries.getElementsByTagName("generic:Time")[0]
    vl =  genericTime.firstChild.data

    file.write(endOfString)
    file.close()